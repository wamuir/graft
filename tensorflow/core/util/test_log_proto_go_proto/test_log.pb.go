// Protocol messages for describing the results of benchmarks and unit tests.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.4
// source: tensorflow/core/util/test_log.proto

package test_log_proto_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of benchmark.
type TestResults_BenchmarkType int32

const (
	TestResults_UNKNOWN            TestResults_BenchmarkType = 0 // Fallback for protos written before Type was introduced.
	TestResults_CPP_MICROBENCHMARK TestResults_BenchmarkType = 1
	TestResults_PYTHON_BENCHMARK   TestResults_BenchmarkType = 2
	TestResults_ANDROID_BENCHMARK  TestResults_BenchmarkType = 3
	TestResults_EDGE_BENCHMARK     TestResults_BenchmarkType = 4
	TestResults_IOS_BENCHMARK      TestResults_BenchmarkType = 5
)

// Enum value maps for TestResults_BenchmarkType.
var (
	TestResults_BenchmarkType_name = map[int32]string{
		0: "UNKNOWN",
		1: "CPP_MICROBENCHMARK",
		2: "PYTHON_BENCHMARK",
		3: "ANDROID_BENCHMARK",
		4: "EDGE_BENCHMARK",
		5: "IOS_BENCHMARK",
	}
	TestResults_BenchmarkType_value = map[string]int32{
		"UNKNOWN":            0,
		"CPP_MICROBENCHMARK": 1,
		"PYTHON_BENCHMARK":   2,
		"ANDROID_BENCHMARK":  3,
		"EDGE_BENCHMARK":     4,
		"IOS_BENCHMARK":      5,
	}
)

func (x TestResults_BenchmarkType) Enum() *TestResults_BenchmarkType {
	p := new(TestResults_BenchmarkType)
	*p = x
	return p
}

func (x TestResults_BenchmarkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestResults_BenchmarkType) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_core_util_test_log_proto_enumTypes[0].Descriptor()
}

func (TestResults_BenchmarkType) Type() protoreflect.EnumType {
	return &file_tensorflow_core_util_test_log_proto_enumTypes[0]
}

func (x TestResults_BenchmarkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestResults_BenchmarkType.Descriptor instead.
func (TestResults_BenchmarkType) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_core_util_test_log_proto_rawDescGZIP(), []int{13, 0}
}

type EntryValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*EntryValue_DoubleValue
	//	*EntryValue_StringValue
	Kind isEntryValue_Kind `protobuf_oneof:"kind"`
}

func (x *EntryValue) Reset() {
	*x = EntryValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_util_test_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryValue) ProtoMessage() {}

func (x *EntryValue) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_util_test_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryValue.ProtoReflect.Descriptor instead.
func (*EntryValue) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_util_test_log_proto_rawDescGZIP(), []int{0}
}

func (m *EntryValue) GetKind() isEntryValue_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *EntryValue) GetDoubleValue() float64 {
	if x, ok := x.GetKind().(*EntryValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *EntryValue) GetStringValue() string {
	if x, ok := x.GetKind().(*EntryValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

type isEntryValue_Kind interface {
	isEntryValue_Kind()
}

type EntryValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type EntryValue_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3,oneof"`
}

func (*EntryValue_DoubleValue) isEntryValue_Kind() {}

func (*EntryValue_StringValue) isEntryValue_Kind() {}

type MetricEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metric name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Metric value
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	// The minimum acceptable value for the metric if specified
	MinValue *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	// The maximum acceptable value for the metric if specified
	MaxValue *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
}

func (x *MetricEntry) Reset() {
	*x = MetricEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_util_test_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricEntry) ProtoMessage() {}

func (x *MetricEntry) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_util_test_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricEntry.ProtoReflect.Descriptor instead.
func (*MetricEntry) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_util_test_log_proto_rawDescGZIP(), []int{1}
}

func (x *MetricEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricEntry) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MetricEntry) GetMinValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MinValue
	}
	return nil
}

func (x *MetricEntry) GetMaxValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxValue
	}
	return nil
}

// Each unit test or benchmark in a test or benchmark run provides
// some set of information.  Here we provide some reasonable keys
// one would expect to see, with optional key/value pairs for things
// we haven't considered.
//
// This BenchmarkEntry should be emitted by each unit test or benchmark
// reporter.
type BenchmarkEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the specific benchmark or test
	// (e.g. BM_AdjustContrast_gpu_B_W_H)
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If a benchmark, how many iterations it was run for
	Iters int64 `protobuf:"varint,2,opt,name=iters,proto3" json:"iters,omitempty"`
	// Total cpu time used for all iterations (in seconds)
	CpuTime float64 `protobuf:"fixed64,3,opt,name=cpu_time,json=cpuTime,proto3" json:"cpu_time,omitempty"`
	// Total wall time used for all iterations (in seconds)
	WallTime float64 `protobuf:"fixed64,4,opt,name=wall_time,json=wallTime,proto3" json:"wall_time,omitempty"`
	// Throughput (in MB/s)
	Throughput float64 `protobuf:"fixed64,5,opt,name=throughput,proto3" json:"throughput,omitempty"`
	// Generic map from result key to value.
	Extras map[string]*EntryValue `protobuf:"bytes,6,rep,name=extras,proto3" json:"extras,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Metric name, value and expected range. This can include accuracy metrics
	// typically used to determine whether the accuracy test has passed
	Metrics []*MetricEntry `protobuf:"bytes,7,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *BenchmarkEntry) Reset() {
	*x = BenchmarkEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_util_test_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkEntry) ProtoMessage() {}

func (x *BenchmarkEntry) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_util_test_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkEntry.ProtoReflect.Descriptor instead.
func (*BenchmarkEntry) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_util_test_log_proto_rawDescGZIP(), []int{2}
}

func (x *BenchmarkEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BenchmarkEntry) GetIters() int64 {
	if x != nil {
		return x.Iters
	}
	return 0
}

func (x *BenchmarkEntry) GetCpuTime() float64 {
	if x != nil {
		return x.CpuTime
	}
	return 0
}

func (x *BenchmarkEntry) GetWallTime() float64 {
	if x != nil {
		return x.WallTime
	}
	return 0
}

func (x *BenchmarkEntry) GetThroughput() float64 {
	if x != nil {
		return x.Throughput
	}
	return 0
}

func (x *BenchmarkEntry) GetExtras() map[string]*EntryValue {
	if x != nil {
		return x.Extras
	}
	return nil
}

func (x *BenchmarkEntry) GetMetrics() []*MetricEntry {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type BenchmarkEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry []*BenchmarkEntry `protobuf:"bytes,1,rep,name=entry,proto3" json:"entry,omitempty"`
}

func (x *BenchmarkEntries) Reset() {
	*x = BenchmarkEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_util_test_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkEntries) ProtoMessage() {}

func (x *BenchmarkEntries) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_util_test_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkEntries.ProtoReflect.Descriptor instead.
func (*BenchmarkEntries) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_util_test_log_proto_rawDescGZIP(), []int{3}
}

func (x *BenchmarkEntries) GetEntry() []*BenchmarkEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type BuildConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode    string   `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`                      // opt, dbg, etc
	CcFlags []string `protobuf:"bytes,2,rep,name=cc_flags,json=ccFlags,proto3" json:"cc_flags,omitempty"` // CC compiler flags, if known
	Opts    []string `protobuf:"bytes,3,rep,name=opts,proto3" json:"opts,omitempty"`                      // Bazel compilation options, if known
}

func (x *BuildConfiguration) Reset() {
	*x = BuildConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_util_test_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildConfiguration) ProtoMessage() {}

func (x *BuildConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_util_test_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildConfiguration.ProtoReflect.Descriptor instead.
func (*BuildConfiguration) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_util_test_log_proto_rawDescGZIP(), []int{4}
}

func (x *BuildConfiguration) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *BuildConfiguration) GetCcFlags() []string {
	if x != nil {
		return x.CcFlags
	}
	return nil
}

func (x *BuildConfiguration) GetOpts() []string {
	if x != nil {
		return x.Opts
	}
	return nil
}

type CommitId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*CommitId_Changelist
	//	*CommitId_Hash
	Kind isCommitId_Kind `protobuf_oneof:"kind"`
	// Hash of intermediate change between hash/changelist and what was tested.
	// Not used if the build is from a commit without modifications.
	Snapshot string `protobuf:"bytes,3,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	// Changelist tested if the change list is not already submitted.
	PendingChangelist int64 `protobuf:"varint,4,opt,name=pending_changelist,json=pendingChangelist,proto3" json:"pending_changelist,omitempty"`
}

func (x *CommitId) Reset() {
	*x = CommitId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_util_test_log_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitId) ProtoMessage() {}

func (x *CommitId) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_util_test_log_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitId.ProtoReflect.Descriptor instead.
func (*CommitId) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_util_test_log_proto_rawDescGZIP(), []int{5}
}

func (m *CommitId) GetKind() isCommitId_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *CommitId) GetChangelist() int64 {
	if x, ok := x.GetKind().(*CommitId_Changelist); ok {
		return x.Changelist
	}
	return 0
}

func (x *CommitId) GetHash() string {
	if x, ok := x.GetKind().(*CommitId_Hash); ok {
		return x.Hash
	}
	return ""
}

func (x *CommitId) GetSnapshot() string {
	if x != nil {
		return x.Snapshot
	}
	return ""
}

func (x *CommitId) GetPendingChangelist() int64 {
	if x != nil {
		return x.PendingChangelist
	}
	return 0
}

type isCommitId_Kind interface {
	isCommitId_Kind()
}

type CommitId_Changelist struct {
	// Submitted changelist.
	Changelist int64 `protobuf:"varint,1,opt,name=changelist,proto3,oneof"`
}

type CommitId_Hash struct {
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3,oneof"`
}

func (*CommitId_Changelist) isCommitId_Kind() {}

func (*CommitId_Hash) isCommitId_Kind() {}

type CPUInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumCores        int64 `protobuf:"varint,1,opt,name=num_cores,json=numCores,proto3" json:"num_cores,omitempty"`
	NumCoresAllowed int64 `protobuf:"varint,2,opt,name=num_cores_allowed,json=numCoresAllowed,proto3" json:"num_cores_allowed,omitempty"`
	// How fast are these cpus?
	MhzPerCpu float64 `protobuf:"fixed64,3,opt,name=mhz_per_cpu,json=mhzPerCpu,proto3" json:"mhz_per_cpu,omitempty"`
	// Additional cpu information. For example,
	// Intel Ivybridge with HyperThreading (24 cores) dL1:32KB dL2:256KB dL3:30MB
	CpuInfo string `protobuf:"bytes,4,opt,name=cpu_info,json=cpuInfo,proto3" json:"cpu_info,omitempty"`
	// What kind of cpu scaling is enabled on the host.
	// Examples include "performance", "ondemand", "conservative", "mixed".
	CpuGovernor string `protobuf:"bytes,5,opt,name=cpu_governor,json=cpuGovernor,proto3" json:"cpu_governor,omitempty"`
	// Cache sizes (in bytes), e.g. "L2": 262144 (for 256KB)
	CacheSize map[string]int64 `protobuf:"bytes,6,rep,name=cache_size,json=cacheSize,proto3" json:"cache_size,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *CPUInfo) Reset() {
	*x = CPUInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_util_test_log_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUInfo) ProtoMessage() {}

func (x *CPUInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_util_test_log_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUInfo.ProtoReflect.Descriptor instead.
func (*CPUInfo) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_util_test_log_proto_rawDescGZIP(), []int{6}
}

func (x *CPUInfo) GetNumCores() int64 {
	if x != nil {
		return x.NumCores
	}
	return 0
}

func (x *CPUInfo) GetNumCoresAllowed() int64 {
	if x != nil {
		return x.NumCoresAllowed
	}
	return 0
}

func (x *CPUInfo) GetMhzPerCpu() float64 {
	if x != nil {
		return x.MhzPerCpu
	}
	return 0
}

func (x *CPUInfo) GetCpuInfo() string {
	if x != nil {
		return x.CpuInfo
	}
	return ""
}

func (x *CPUInfo) GetCpuGovernor() string {
	if x != nil {
		return x.CpuGovernor
	}
	return ""
}

func (x *CPUInfo) GetCacheSize() map[string]int64 {
	if x != nil {
		return x.CacheSize
	}
	return nil
}

type MemoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`         // Total virtual memory in bytes
	Available int64 `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"` // Immediately available memory in bytes
}

func (x *MemoryInfo) Reset() {
	*x = MemoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_util_test_log_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryInfo) ProtoMessage() {}

func (x *MemoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_util_test_log_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryInfo.ProtoReflect.Descriptor instead.
func (*MemoryInfo) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_util_test_log_proto_rawDescGZIP(), []int{7}
}

func (x *MemoryInfo) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MemoryInfo) GetAvailable() int64 {
	if x != nil {
		return x.Available
	}
	return 0
}

type GPUInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`              // e.g. "Tesla K40c"
	Uuid  string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`                // Final entry in output of "nvidia-smi -L"
	BusId string `protobuf:"bytes,3,opt,name=bus_id,json=busId,proto3" json:"bus_id,omitempty"` // e.g. "0000:04:00.0"
}

func (x *GPUInfo) Reset() {
	*x = GPUInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_util_test_log_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUInfo) ProtoMessage() {}

func (x *GPUInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_util_test_log_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUInfo.ProtoReflect.Descriptor instead.
func (*GPUInfo) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_util_test_log_proto_rawDescGZIP(), []int{8}
}

func (x *GPUInfo) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *GPUInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GPUInfo) GetBusId() string {
	if x != nil {
		return x.BusId
	}
	return ""
}

type PlatformInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bits    string `protobuf:"bytes,1,opt,name=bits,proto3" json:"bits,omitempty"`       // e.g. '64bit'
	Linkage string `protobuf:"bytes,2,opt,name=linkage,proto3" json:"linkage,omitempty"` // e.g. 'ELF'
	Machine string `protobuf:"bytes,3,opt,name=machine,proto3" json:"machine,omitempty"` // e.g. 'i386'
	Release string `protobuf:"bytes,4,opt,name=release,proto3" json:"release,omitempty"` // e.g. '3.13.0-76-generic'
	System  string `protobuf:"bytes,5,opt,name=system,proto3" json:"system,omitempty"`   // e.g. 'Linux'
	Version string `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"` // e.g. '#120-Ubuntu SMP Mon Jan 18 15:59:10 UTC 2016'
}

func (x *PlatformInfo) Reset() {
	*x = PlatformInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_util_test_log_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformInfo) ProtoMessage() {}

func (x *PlatformInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_util_test_log_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformInfo.ProtoReflect.Descriptor instead.
func (*PlatformInfo) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_util_test_log_proto_rawDescGZIP(), []int{9}
}

func (x *PlatformInfo) GetBits() string {
	if x != nil {
		return x.Bits
	}
	return ""
}

func (x *PlatformInfo) GetLinkage() string {
	if x != nil {
		return x.Linkage
	}
	return ""
}

func (x *PlatformInfo) GetMachine() string {
	if x != nil {
		return x.Machine
	}
	return ""
}

func (x *PlatformInfo) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *PlatformInfo) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *PlatformInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type AvailableDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                          // Device name.
	Type                string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`                                                          // Device type, e.g. 'CPU' or 'GPU'.
	MemoryLimit         int64  `protobuf:"varint,3,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,omitempty"`                        // Memory capacity in bytes.
	PhysicalDescription string `protobuf:"bytes,4,opt,name=physical_description,json=physicalDescription,proto3" json:"physical_description,omitempty"` // The physical description of this device.
}

func (x *AvailableDeviceInfo) Reset() {
	*x = AvailableDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_util_test_log_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableDeviceInfo) ProtoMessage() {}

func (x *AvailableDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_util_test_log_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableDeviceInfo.ProtoReflect.Descriptor instead.
func (*AvailableDeviceInfo) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_util_test_log_proto_rawDescGZIP(), []int{10}
}

func (x *AvailableDeviceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AvailableDeviceInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AvailableDeviceInfo) GetMemoryLimit() int64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *AvailableDeviceInfo) GetPhysicalDescription() string {
	if x != nil {
		return x.PhysicalDescription
	}
	return ""
}

type MachineConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host name of machine that ran the benchmark.
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Unique serial number of the machine.
	SerialIdentifier string `protobuf:"bytes,7,opt,name=serial_identifier,json=serialIdentifier,proto3" json:"serial_identifier,omitempty"`
	// Additional platform information.
	PlatformInfo *PlatformInfo `protobuf:"bytes,2,opt,name=platform_info,json=platformInfo,proto3" json:"platform_info,omitempty"`
	// CPU Information.
	CpuInfo *CPUInfo `protobuf:"bytes,3,opt,name=cpu_info,json=cpuInfo,proto3" json:"cpu_info,omitempty"`
	// Other devices that are attached and relevant (e.g. GPUInfo).
	DeviceInfo []*anypb.Any `protobuf:"bytes,4,rep,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
	// Devices accessible to the test (e.g. as given by list_local_devices).
	AvailableDeviceInfo []*AvailableDeviceInfo `protobuf:"bytes,5,rep,name=available_device_info,json=availableDeviceInfo,proto3" json:"available_device_info,omitempty"`
	MemoryInfo          *MemoryInfo            `protobuf:"bytes,6,opt,name=memory_info,json=memoryInfo,proto3" json:"memory_info,omitempty"`
}

func (x *MachineConfiguration) Reset() {
	*x = MachineConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_util_test_log_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineConfiguration) ProtoMessage() {}

func (x *MachineConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_util_test_log_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineConfiguration.ProtoReflect.Descriptor instead.
func (*MachineConfiguration) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_util_test_log_proto_rawDescGZIP(), []int{11}
}

func (x *MachineConfiguration) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *MachineConfiguration) GetSerialIdentifier() string {
	if x != nil {
		return x.SerialIdentifier
	}
	return ""
}

func (x *MachineConfiguration) GetPlatformInfo() *PlatformInfo {
	if x != nil {
		return x.PlatformInfo
	}
	return nil
}

func (x *MachineConfiguration) GetCpuInfo() *CPUInfo {
	if x != nil {
		return x.CpuInfo
	}
	return nil
}

func (x *MachineConfiguration) GetDeviceInfo() []*anypb.Any {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *MachineConfiguration) GetAvailableDeviceInfo() []*AvailableDeviceInfo {
	if x != nil {
		return x.AvailableDeviceInfo
	}
	return nil
}

func (x *MachineConfiguration) GetMemoryInfo() *MemoryInfo {
	if x != nil {
		return x.MemoryInfo
	}
	return nil
}

// Run-specific items such as arguments to the test / benchmark.
type RunConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Argument []string `protobuf:"bytes,1,rep,name=argument,proto3" json:"argument,omitempty"`
	// Environment variables used to run the test/benchmark.
	EnvVars map[string]string `protobuf:"bytes,2,rep,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RunConfiguration) Reset() {
	*x = RunConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_util_test_log_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunConfiguration) ProtoMessage() {}

func (x *RunConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_util_test_log_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunConfiguration.ProtoReflect.Descriptor instead.
func (*RunConfiguration) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_util_test_log_proto_rawDescGZIP(), []int{12}
}

func (x *RunConfiguration) GetArgument() []string {
	if x != nil {
		return x.Argument
	}
	return nil
}

func (x *RunConfiguration) GetEnvVars() map[string]string {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

// The output of one benchmark / test run.  Each run contains a list of
// tests or benchmarks, stored as BenchmarkEntry messages.
//
// This message should be emitted by the reporter (which runs the
// test / BM in a subprocess and then reads the emitted BenchmarkEntry messages;
// usually from a serialized json file, finally collecting them along
// with additional information about the test run.
type TestResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The target of the run, e.g.:
	//  //tensorflow/core:kernels_adjust_contrast_op_benchmark_test
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// The list of tests or benchmarks in this run.
	Entries *BenchmarkEntries `protobuf:"bytes,2,opt,name=entries,proto3" json:"entries,omitempty"`
	// The configuration of the build (compiled opt? with cuda? any copts?)
	BuildConfiguration *BuildConfiguration `protobuf:"bytes,3,opt,name=build_configuration,json=buildConfiguration,proto3" json:"build_configuration,omitempty"`
	// The commit id (git hash or changelist)
	CommitId *CommitId `protobuf:"bytes,4,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	// The time the run started (in seconds of UTC time since Unix epoch)
	StartTime int64 `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The amount of time the total run took (wall time in seconds)
	RunTime float64 `protobuf:"fixed64,6,opt,name=run_time,json=runTime,proto3" json:"run_time,omitempty"`
	// Machine-specific parameters (Platform and CPU info)
	MachineConfiguration *MachineConfiguration `protobuf:"bytes,7,opt,name=machine_configuration,json=machineConfiguration,proto3" json:"machine_configuration,omitempty"`
	// Run-specific parameters (arguments, etc)
	RunConfiguration *RunConfiguration `protobuf:"bytes,8,opt,name=run_configuration,json=runConfiguration,proto3" json:"run_configuration,omitempty"`
	// Benchmark target identifier.
	Name          string                    `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	BenchmarkType TestResults_BenchmarkType `protobuf:"varint,10,opt,name=benchmark_type,json=benchmarkType,proto3,enum=tensorflow.TestResults_BenchmarkType" json:"benchmark_type,omitempty"`
	// Used for differentiating between continuous and debug builds.
	// Must be one of:
	// * cbuild: results from continuous build.
	// * presubmit: results from oneshot requests.
	// * culprit: results from culprit finder rerun.
	RunMode string `protobuf:"bytes,11,opt,name=run_mode,json=runMode,proto3" json:"run_mode,omitempty"`
	// TensorFlow version this benchmark runs against.
	// This can be either set to full version or just the major version.
	TfVersion string `protobuf:"bytes,12,opt,name=tf_version,json=tfVersion,proto3" json:"tf_version,omitempty"`
}

func (x *TestResults) Reset() {
	*x = TestResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_util_test_log_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResults) ProtoMessage() {}

func (x *TestResults) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_util_test_log_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResults.ProtoReflect.Descriptor instead.
func (*TestResults) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_util_test_log_proto_rawDescGZIP(), []int{13}
}

func (x *TestResults) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *TestResults) GetEntries() *BenchmarkEntries {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *TestResults) GetBuildConfiguration() *BuildConfiguration {
	if x != nil {
		return x.BuildConfiguration
	}
	return nil
}

func (x *TestResults) GetCommitId() *CommitId {
	if x != nil {
		return x.CommitId
	}
	return nil
}

func (x *TestResults) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TestResults) GetRunTime() float64 {
	if x != nil {
		return x.RunTime
	}
	return 0
}

func (x *TestResults) GetMachineConfiguration() *MachineConfiguration {
	if x != nil {
		return x.MachineConfiguration
	}
	return nil
}

func (x *TestResults) GetRunConfiguration() *RunConfiguration {
	if x != nil {
		return x.RunConfiguration
	}
	return nil
}

func (x *TestResults) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestResults) GetBenchmarkType() TestResults_BenchmarkType {
	if x != nil {
		return x.BenchmarkType
	}
	return TestResults_UNKNOWN
}

func (x *TestResults) GetRunMode() string {
	if x != nil {
		return x.RunMode
	}
	return ""
}

func (x *TestResults) GetTfVersion() string {
	if x != nil {
		return x.TfVersion
	}
	return ""
}

var File_tensorflow_core_util_test_log_proto protoreflect.FileDescriptor

var file_tensorflow_core_util_test_log_proto_rawDesc = []byte{
	0x0a, 0x23, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x0a,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xad, 0x01, 0x0a,
	0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x39, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd8, 0x02, 0x0a,
	0x0e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x69, 0x74, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x70, 0x75,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75,
	0x74, 0x12, 0x3e, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x42,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x73, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x1a, 0x51, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x10, 0x42, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x57, 0x0a,
	0x12, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x63, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x63, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xb1,
	0x02, 0x0a, 0x07, 0x43, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75,
	0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e,
	0x75, 0x6d, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x68, 0x7a, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63,
	0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x68, 0x7a, 0x50, 0x65, 0x72,
	0x43, 0x70, 0x75, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x70, 0x75, 0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f,
	0x72, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x43, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x40, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x4a, 0x0a, 0x07, 0x47, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x75, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x73, 0x49, 0x64,
	0x22, 0xa2, 0x01, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x62, 0x69, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x93, 0x03, 0x0a, 0x14,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3d, 0x0a,
	0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x08,
	0x63, 0x70, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x50, 0x55, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a, 0x15, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0xb0, 0x01, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x65, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x45, 0x6e, 0x76, 0x56,
	0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xe4, 0x05, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x13, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x12, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x55, 0x0a, 0x15, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x11, 0x72, 0x75, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x72, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61,
	0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x66, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x66, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x88, 0x01, 0x0a, 0x0d, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x50, 0x50, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x42, 0x45, 0x4e, 0x43,
	0x48, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x59, 0x54, 0x48, 0x4f,
	0x4e, 0x5f, 0x42, 0x45, 0x4e, 0x43, 0x48, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x42, 0x45, 0x4e, 0x43, 0x48, 0x4d, 0x41,
	0x52, 0x4b, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x42, 0x45, 0x4e,
	0x43, 0x48, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4f, 0x53, 0x5f,
	0x42, 0x45, 0x4e, 0x43, 0x48, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x05, 0x42, 0x83, 0x01, 0x0a, 0x1b,
	0x6f, 0x72, 0x67, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x6c, 0x6f, 0x67, 0x42, 0x0d, 0x54, 0x65, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x50, 0x01, 0x5a, 0x50, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xf8, 0x01,
	0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_core_util_test_log_proto_rawDescOnce sync.Once
	file_tensorflow_core_util_test_log_proto_rawDescData = file_tensorflow_core_util_test_log_proto_rawDesc
)

func file_tensorflow_core_util_test_log_proto_rawDescGZIP() []byte {
	file_tensorflow_core_util_test_log_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_util_test_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_util_test_log_proto_rawDescData)
	})
	return file_tensorflow_core_util_test_log_proto_rawDescData
}

var file_tensorflow_core_util_test_log_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tensorflow_core_util_test_log_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_tensorflow_core_util_test_log_proto_goTypes = []interface{}{
	(TestResults_BenchmarkType)(0), // 0: tensorflow.TestResults.BenchmarkType
	(*EntryValue)(nil),             // 1: tensorflow.EntryValue
	(*MetricEntry)(nil),            // 2: tensorflow.MetricEntry
	(*BenchmarkEntry)(nil),         // 3: tensorflow.BenchmarkEntry
	(*BenchmarkEntries)(nil),       // 4: tensorflow.BenchmarkEntries
	(*BuildConfiguration)(nil),     // 5: tensorflow.BuildConfiguration
	(*CommitId)(nil),               // 6: tensorflow.CommitId
	(*CPUInfo)(nil),                // 7: tensorflow.CPUInfo
	(*MemoryInfo)(nil),             // 8: tensorflow.MemoryInfo
	(*GPUInfo)(nil),                // 9: tensorflow.GPUInfo
	(*PlatformInfo)(nil),           // 10: tensorflow.PlatformInfo
	(*AvailableDeviceInfo)(nil),    // 11: tensorflow.AvailableDeviceInfo
	(*MachineConfiguration)(nil),   // 12: tensorflow.MachineConfiguration
	(*RunConfiguration)(nil),       // 13: tensorflow.RunConfiguration
	(*TestResults)(nil),            // 14: tensorflow.TestResults
	nil,                            // 15: tensorflow.BenchmarkEntry.ExtrasEntry
	nil,                            // 16: tensorflow.CPUInfo.CacheSizeEntry
	nil,                            // 17: tensorflow.RunConfiguration.EnvVarsEntry
	(*wrapperspb.DoubleValue)(nil), // 18: google.protobuf.DoubleValue
	(*anypb.Any)(nil),              // 19: google.protobuf.Any
}
var file_tensorflow_core_util_test_log_proto_depIdxs = []int32{
	18, // 0: tensorflow.MetricEntry.min_value:type_name -> google.protobuf.DoubleValue
	18, // 1: tensorflow.MetricEntry.max_value:type_name -> google.protobuf.DoubleValue
	15, // 2: tensorflow.BenchmarkEntry.extras:type_name -> tensorflow.BenchmarkEntry.ExtrasEntry
	2,  // 3: tensorflow.BenchmarkEntry.metrics:type_name -> tensorflow.MetricEntry
	3,  // 4: tensorflow.BenchmarkEntries.entry:type_name -> tensorflow.BenchmarkEntry
	16, // 5: tensorflow.CPUInfo.cache_size:type_name -> tensorflow.CPUInfo.CacheSizeEntry
	10, // 6: tensorflow.MachineConfiguration.platform_info:type_name -> tensorflow.PlatformInfo
	7,  // 7: tensorflow.MachineConfiguration.cpu_info:type_name -> tensorflow.CPUInfo
	19, // 8: tensorflow.MachineConfiguration.device_info:type_name -> google.protobuf.Any
	11, // 9: tensorflow.MachineConfiguration.available_device_info:type_name -> tensorflow.AvailableDeviceInfo
	8,  // 10: tensorflow.MachineConfiguration.memory_info:type_name -> tensorflow.MemoryInfo
	17, // 11: tensorflow.RunConfiguration.env_vars:type_name -> tensorflow.RunConfiguration.EnvVarsEntry
	4,  // 12: tensorflow.TestResults.entries:type_name -> tensorflow.BenchmarkEntries
	5,  // 13: tensorflow.TestResults.build_configuration:type_name -> tensorflow.BuildConfiguration
	6,  // 14: tensorflow.TestResults.commit_id:type_name -> tensorflow.CommitId
	12, // 15: tensorflow.TestResults.machine_configuration:type_name -> tensorflow.MachineConfiguration
	13, // 16: tensorflow.TestResults.run_configuration:type_name -> tensorflow.RunConfiguration
	0,  // 17: tensorflow.TestResults.benchmark_type:type_name -> tensorflow.TestResults.BenchmarkType
	1,  // 18: tensorflow.BenchmarkEntry.ExtrasEntry.value:type_name -> tensorflow.EntryValue
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_tensorflow_core_util_test_log_proto_init() }
func file_tensorflow_core_util_test_log_proto_init() {
	if File_tensorflow_core_util_test_log_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_util_test_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_util_test_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_util_test_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_util_test_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_util_test_log_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_util_test_log_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_util_test_log_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_util_test_log_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_util_test_log_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPUInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_util_test_log_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_util_test_log_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_util_test_log_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_util_test_log_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_util_test_log_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tensorflow_core_util_test_log_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*EntryValue_DoubleValue)(nil),
		(*EntryValue_StringValue)(nil),
	}
	file_tensorflow_core_util_test_log_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*CommitId_Changelist)(nil),
		(*CommitId_Hash)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_util_test_log_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_core_util_test_log_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_util_test_log_proto_depIdxs,
		EnumInfos:         file_tensorflow_core_util_test_log_proto_enumTypes,
		MessageInfos:      file_tensorflow_core_util_test_log_proto_msgTypes,
	}.Build()
	File_tensorflow_core_util_test_log_proto = out.File
	file_tensorflow_core_util_test_log_proto_rawDesc = nil
	file_tensorflow_core_util_test_log_proto_goTypes = nil
	file_tensorflow_core_util_test_log_proto_depIdxs = nil
}
