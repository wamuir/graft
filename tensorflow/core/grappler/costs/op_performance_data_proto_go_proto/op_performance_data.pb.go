// Copyright 2017 The TensorFlow Authors. All Rights Reserved.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//==============================================================================

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.4
// source: tensorflow/core/grappler/costs/op_performance_data.proto

package op_performance_data_proto_go_proto

import (
	attr_value_go_proto "github.com/wamuir/graft/tensorflow/core/framework/attr_value_go_proto"
	tensor_go_proto "github.com/wamuir/graft/tensorflow/core/framework/tensor_go_proto"
	tensor_shape_go_proto "github.com/wamuir/graft/tensorflow/core/framework/tensor_shape_go_proto"
	types_go_proto "github.com/wamuir/graft/tensorflow/core/framework/types_go_proto"
	for_core_protos_go_proto "github.com/wamuir/graft/tensorflow/core/protobuf/for_core_protos_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Description of the session when an op is run.
type SessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntraOpParallelism int64 `protobuf:"varint,1,opt,name=intra_op_parallelism,json=intraOpParallelism,proto3" json:"intra_op_parallelism,omitempty"`
}

func (x *SessionInfo) Reset() {
	*x = SessionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInfo) ProtoMessage() {}

func (x *SessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInfo.ProtoReflect.Descriptor instead.
func (*SessionInfo) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_grappler_costs_op_performance_data_proto_rawDescGZIP(), []int{0}
}

func (x *SessionInfo) GetIntraOpParallelism() int64 {
	if x != nil {
		return x.IntraOpParallelism
	}
	return 0
}

// Description of an operation as well as the parameters expected to impact its
// performance.
type OpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The operation name.  There may be custom parameters in attrs.
	Op string `protobuf:"bytes,1,opt,name=op,proto3" json:"op,omitempty"`
	// Custom parameters impacting the behavior of the op.
	Attr   map[string]*attr_value_go_proto.AttrValue `protobuf:"bytes,2,rep,name=attr,proto3" json:"attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Inputs []*OpInfo_TensorProperties                `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Optional description of the op outputs
	Outputs []*OpInfo_TensorProperties `protobuf:"bytes,5,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// Device on which the operation is run.
	Device *for_core_protos_go_proto.DeviceProperties `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	// Information about the session configs.
	SessionInfo *SessionInfo `protobuf:"bytes,6,opt,name=session_info,json=sessionInfo,proto3" json:"session_info,omitempty"`
}

func (x *OpInfo) Reset() {
	*x = OpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpInfo) ProtoMessage() {}

func (x *OpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpInfo.ProtoReflect.Descriptor instead.
func (*OpInfo) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_grappler_costs_op_performance_data_proto_rawDescGZIP(), []int{1}
}

func (x *OpInfo) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

func (x *OpInfo) GetAttr() map[string]*attr_value_go_proto.AttrValue {
	if x != nil {
		return x.Attr
	}
	return nil
}

func (x *OpInfo) GetInputs() []*OpInfo_TensorProperties {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *OpInfo) GetOutputs() []*OpInfo_TensorProperties {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *OpInfo) GetDevice() *for_core_protos_go_proto.DeviceProperties {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *OpInfo) GetSessionInfo() *SessionInfo {
	if x != nil {
		return x.SessionInfo
	}
	return nil
}

type NormalDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mu    float64 `protobuf:"fixed64,1,opt,name=mu,proto3" json:"mu,omitempty"`
	Sigma float64 `protobuf:"fixed64,2,opt,name=sigma,proto3" json:"sigma,omitempty"`
}

func (x *NormalDistribution) Reset() {
	*x = NormalDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalDistribution) ProtoMessage() {}

func (x *NormalDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalDistribution.ProtoReflect.Descriptor instead.
func (*NormalDistribution) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_grappler_costs_op_performance_data_proto_rawDescGZIP(), []int{2}
}

func (x *NormalDistribution) GetMu() float64 {
	if x != nil {
		return x.Mu
	}
	return 0
}

func (x *NormalDistribution) GetSigma() float64 {
	if x != nil {
		return x.Sigma
	}
	return 0
}

type LogNormalDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mu    float64 `protobuf:"fixed64,1,opt,name=mu,proto3" json:"mu,omitempty"`
	Sigma float64 `protobuf:"fixed64,2,opt,name=sigma,proto3" json:"sigma,omitempty"`
}

func (x *LogNormalDistribution) Reset() {
	*x = LogNormalDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogNormalDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogNormalDistribution) ProtoMessage() {}

func (x *LogNormalDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogNormalDistribution.ProtoReflect.Descriptor instead.
func (*LogNormalDistribution) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_grappler_costs_op_performance_data_proto_rawDescGZIP(), []int{3}
}

func (x *LogNormalDistribution) GetMu() float64 {
	if x != nil {
		return x.Mu
	}
	return 0
}

func (x *LogNormalDistribution) GetSigma() float64 {
	if x != nil {
		return x.Sigma
	}
	return 0
}

// Performance data for tensorflow operations
type OpPerformance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The op
	Op *OpInfo `protobuf:"bytes,1,opt,name=op,proto3" json:"op,omitempty"`
	// Information about the session configs.
	//
	// Deprecated: Do not use.
	SessionInfo *SessionInfo `protobuf:"bytes,12,opt,name=session_info,json=sessionInfo,proto3" json:"session_info,omitempty"`
	// The node name (optional). Makes it easier to associate the performance data
	// with a specific graph node.
	Node string `protobuf:"bytes,5,opt,name=node,proto3" json:"node,omitempty"`
	// Temporary memory used by this node (in bytes).
	TemporaryMemorySize int64 `protobuf:"varint,2,opt,name=temporary_memory_size,json=temporaryMemorySize,proto3" json:"temporary_memory_size,omitempty"`
	// Time it takes to run the op (in nanoseconds).
	ComputeCost int64 `protobuf:"varint,3,opt,name=compute_cost,json=computeCost,proto3" json:"compute_cost,omitempty"`
	// Analytical compute cost (in nanoseconds).
	ComputeTime int64 `protobuf:"varint,6,opt,name=compute_time,json=computeTime,proto3" json:"compute_time,omitempty"`
	// Analytical memory access cost (in nanoseconds).
	MemoryTime int64 `protobuf:"varint,7,opt,name=memory_time,json=memoryTime,proto3" json:"memory_time,omitempty"`
	// Percentage of theoretical compute performance.
	ComputeEfficiency float64 `protobuf:"fixed64,4,opt,name=compute_efficiency,json=computeEfficiency,proto3" json:"compute_efficiency,omitempty"`
	// Percentage of theoretical memory performance.
	MemoryEfficiency float64 `protobuf:"fixed64,8,opt,name=memory_efficiency,json=memoryEfficiency,proto3" json:"memory_efficiency,omitempty"`
	// Expected execution time, modeled using one of 2 possible distributions.
	//
	// Types that are assignable to ExecutionTime:
	//	*OpPerformance_ExecutionTimeNormal
	//	*OpPerformance_ExecutionTimeLogNormal
	ExecutionTime isOpPerformance_ExecutionTime `protobuf_oneof:"execution_time"`
	OpMemory      *OpPerformance_OpMemory       `protobuf:"bytes,9,opt,name=op_memory,json=opMemory,proto3" json:"op_memory,omitempty"`
}

func (x *OpPerformance) Reset() {
	*x = OpPerformance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpPerformance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpPerformance) ProtoMessage() {}

func (x *OpPerformance) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpPerformance.ProtoReflect.Descriptor instead.
func (*OpPerformance) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_grappler_costs_op_performance_data_proto_rawDescGZIP(), []int{4}
}

func (x *OpPerformance) GetOp() *OpInfo {
	if x != nil {
		return x.Op
	}
	return nil
}

// Deprecated: Do not use.
func (x *OpPerformance) GetSessionInfo() *SessionInfo {
	if x != nil {
		return x.SessionInfo
	}
	return nil
}

func (x *OpPerformance) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *OpPerformance) GetTemporaryMemorySize() int64 {
	if x != nil {
		return x.TemporaryMemorySize
	}
	return 0
}

func (x *OpPerformance) GetComputeCost() int64 {
	if x != nil {
		return x.ComputeCost
	}
	return 0
}

func (x *OpPerformance) GetComputeTime() int64 {
	if x != nil {
		return x.ComputeTime
	}
	return 0
}

func (x *OpPerformance) GetMemoryTime() int64 {
	if x != nil {
		return x.MemoryTime
	}
	return 0
}

func (x *OpPerformance) GetComputeEfficiency() float64 {
	if x != nil {
		return x.ComputeEfficiency
	}
	return 0
}

func (x *OpPerformance) GetMemoryEfficiency() float64 {
	if x != nil {
		return x.MemoryEfficiency
	}
	return 0
}

func (m *OpPerformance) GetExecutionTime() isOpPerformance_ExecutionTime {
	if m != nil {
		return m.ExecutionTime
	}
	return nil
}

func (x *OpPerformance) GetExecutionTimeNormal() *NormalDistribution {
	if x, ok := x.GetExecutionTime().(*OpPerformance_ExecutionTimeNormal); ok {
		return x.ExecutionTimeNormal
	}
	return nil
}

func (x *OpPerformance) GetExecutionTimeLogNormal() *LogNormalDistribution {
	if x, ok := x.GetExecutionTime().(*OpPerformance_ExecutionTimeLogNormal); ok {
		return x.ExecutionTimeLogNormal
	}
	return nil
}

func (x *OpPerformance) GetOpMemory() *OpPerformance_OpMemory {
	if x != nil {
		return x.OpMemory
	}
	return nil
}

type isOpPerformance_ExecutionTime interface {
	isOpPerformance_ExecutionTime()
}

type OpPerformance_ExecutionTimeNormal struct {
	ExecutionTimeNormal *NormalDistribution `protobuf:"bytes,10,opt,name=execution_time_normal,json=executionTimeNormal,proto3,oneof"`
}

type OpPerformance_ExecutionTimeLogNormal struct {
	ExecutionTimeLogNormal *LogNormalDistribution `protobuf:"bytes,11,opt,name=execution_time_log_normal,json=executionTimeLogNormal,proto3,oneof"`
}

func (*OpPerformance_ExecutionTimeNormal) isOpPerformance_ExecutionTime() {}

func (*OpPerformance_ExecutionTimeLogNormal) isOpPerformance_ExecutionTime() {}

// A collection of OpPerformance data points.
type OpPerformanceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpPerformance []*OpPerformance `protobuf:"bytes,1,rep,name=op_performance,json=opPerformance,proto3" json:"op_performance,omitempty"`
}

func (x *OpPerformanceList) Reset() {
	*x = OpPerformanceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpPerformanceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpPerformanceList) ProtoMessage() {}

func (x *OpPerformanceList) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpPerformanceList.ProtoReflect.Descriptor instead.
func (*OpPerformanceList) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_grappler_costs_op_performance_data_proto_rawDescGZIP(), []int{5}
}

func (x *OpPerformanceList) GetOpPerformance() []*OpPerformance {
	if x != nil {
		return x.OpPerformance
	}
	return nil
}

// Input data types, shapes and values if known.
type OpInfo_TensorProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dtype types_go_proto.DataType                 `protobuf:"varint,1,opt,name=dtype,proto3,enum=tensorflow.DataType" json:"dtype,omitempty"`
	Shape *tensor_shape_go_proto.TensorShapeProto `protobuf:"bytes,2,opt,name=shape,proto3" json:"shape,omitempty"`
	Value *tensor_go_proto.TensorProto            `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OpInfo_TensorProperties) Reset() {
	*x = OpInfo_TensorProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpInfo_TensorProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpInfo_TensorProperties) ProtoMessage() {}

func (x *OpInfo_TensorProperties) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpInfo_TensorProperties.ProtoReflect.Descriptor instead.
func (*OpInfo_TensorProperties) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_grappler_costs_op_performance_data_proto_rawDescGZIP(), []int{1, 1}
}

func (x *OpInfo_TensorProperties) GetDtype() types_go_proto.DataType {
	if x != nil {
		return x.Dtype
	}
	return types_go_proto.DataType(0)
}

func (x *OpInfo_TensorProperties) GetShape() *tensor_shape_go_proto.TensorShapeProto {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *OpInfo_TensorProperties) GetValue() *tensor_go_proto.TensorProto {
	if x != nil {
		return x.Value
	}
	return nil
}

// Memory usage data for a tensorflow operation.
type OpPerformance_OpMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The output information may have memory usage and output shapes.
	OutputMemory []int64 `protobuf:"varint,1,rep,packed,name=output_memory,json=outputMemory,proto3" json:"output_memory,omitempty"`
	// Temp and persistent memory allocated by this node.
	TempMemory       int64 `protobuf:"varint,2,opt,name=temp_memory,json=tempMemory,proto3" json:"temp_memory,omitempty"`
	PersistentMemory int64 `protobuf:"varint,4,opt,name=persistent_memory,json=persistentMemory,proto3" json:"persistent_memory,omitempty"`
	// Deprecated: Do not use.
	DeviceTempMemory int64 `protobuf:"varint,3,opt,name=device_temp_memory,json=deviceTempMemory,proto3" json:"device_temp_memory,omitempty"`
	// Deprecated: Do not use.
	DevicePersistentMemory int64 `protobuf:"varint,5,opt,name=device_persistent_memory,json=devicePersistentMemory,proto3" json:"device_persistent_memory,omitempty"`
}

func (x *OpPerformance_OpMemory) Reset() {
	*x = OpPerformance_OpMemory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpPerformance_OpMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpPerformance_OpMemory) ProtoMessage() {}

func (x *OpPerformance_OpMemory) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpPerformance_OpMemory.ProtoReflect.Descriptor instead.
func (*OpPerformance_OpMemory) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_grappler_costs_op_performance_data_proto_rawDescGZIP(), []int{4, 0}
}

func (x *OpPerformance_OpMemory) GetOutputMemory() []int64 {
	if x != nil {
		return x.OutputMemory
	}
	return nil
}

func (x *OpPerformance_OpMemory) GetTempMemory() int64 {
	if x != nil {
		return x.TempMemory
	}
	return 0
}

func (x *OpPerformance_OpMemory) GetPersistentMemory() int64 {
	if x != nil {
		return x.PersistentMemory
	}
	return 0
}

// Deprecated: Do not use.
func (x *OpPerformance_OpMemory) GetDeviceTempMemory() int64 {
	if x != nil {
		return x.DeviceTempMemory
	}
	return 0
}

// Deprecated: Do not use.
func (x *OpPerformance_OpMemory) GetDevicePersistentMemory() int64 {
	if x != nil {
		return x.DevicePersistentMemory
	}
	return 0
}

var File_tensorflow_core_grappler_costs_op_performance_data_proto protoreflect.FileDescriptor

var file_tensorflow_core_grappler_costs_op_performance_data_proto_rawDesc = []byte{
	0x0a, 0x38, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x73,
	0x2f, 0x6f, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x26, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x30, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x3f, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x5f, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x69, 0x6e, 0x74, 0x72, 0x61, 0x4f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69,
	0x73, 0x6d, 0x22, 0xac, 0x04, 0x0a, 0x06, 0x4f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x30, 0x0a,
	0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x12,
	0x3b, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4f, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x07,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4f, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x4e, 0x0a,
	0x09, 0x41, 0x74, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xa1, 0x01,
	0x0a, 0x10, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32,
	0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x73, 0x68, 0x61,
	0x70, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x3a, 0x0a, 0x12, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6d, 0x75, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x02, 0x6d, 0x75, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x22, 0x3d, 0x0a,
	0x15, 0x4c, 0x6f, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6d, 0x75, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x6d, 0x75, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x22, 0xf7, 0x06, 0x0a,
	0x0d, 0x4f, 0x70, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22,
	0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x02,
	0x6f, 0x70, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x54, 0x0a,
	0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x12, 0x5e, 0x0a, 0x19, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4f, 0x70, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x4f, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x6f, 0x70, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x1a, 0xed, 0x01, 0x0a, 0x08, 0x4f, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6d,
	0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x18, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x16, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x11, 0x4f, 0x70, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x6f,
	0x70, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x4f, 0x70, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0d,
	0x6f, 0x70, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x6a, 0x5a,
	0x65, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f,
	0x73, 0x74, 0x73, 0x2f, 0x6f, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x6f,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_tensorflow_core_grappler_costs_op_performance_data_proto_rawDescOnce sync.Once
	file_tensorflow_core_grappler_costs_op_performance_data_proto_rawDescData = file_tensorflow_core_grappler_costs_op_performance_data_proto_rawDesc
)

func file_tensorflow_core_grappler_costs_op_performance_data_proto_rawDescGZIP() []byte {
	file_tensorflow_core_grappler_costs_op_performance_data_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_grappler_costs_op_performance_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_grappler_costs_op_performance_data_proto_rawDescData)
	})
	return file_tensorflow_core_grappler_costs_op_performance_data_proto_rawDescData
}

var file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_tensorflow_core_grappler_costs_op_performance_data_proto_goTypes = []interface{}{
	(*SessionInfo)(nil),             // 0: tensorflow.SessionInfo
	(*OpInfo)(nil),                  // 1: tensorflow.OpInfo
	(*NormalDistribution)(nil),      // 2: tensorflow.NormalDistribution
	(*LogNormalDistribution)(nil),   // 3: tensorflow.LogNormalDistribution
	(*OpPerformance)(nil),           // 4: tensorflow.OpPerformance
	(*OpPerformanceList)(nil),       // 5: tensorflow.OpPerformanceList
	nil,                             // 6: tensorflow.OpInfo.AttrEntry
	(*OpInfo_TensorProperties)(nil), // 7: tensorflow.OpInfo.TensorProperties
	(*OpPerformance_OpMemory)(nil),  // 8: tensorflow.OpPerformance.OpMemory
	(*for_core_protos_go_proto.DeviceProperties)(nil), // 9: tensorflow.DeviceProperties
	(*attr_value_go_proto.AttrValue)(nil),             // 10: tensorflow.AttrValue
	(types_go_proto.DataType)(0),                      // 11: tensorflow.DataType
	(*tensor_shape_go_proto.TensorShapeProto)(nil),    // 12: tensorflow.TensorShapeProto
	(*tensor_go_proto.TensorProto)(nil),               // 13: tensorflow.TensorProto
}
var file_tensorflow_core_grappler_costs_op_performance_data_proto_depIdxs = []int32{
	6,  // 0: tensorflow.OpInfo.attr:type_name -> tensorflow.OpInfo.AttrEntry
	7,  // 1: tensorflow.OpInfo.inputs:type_name -> tensorflow.OpInfo.TensorProperties
	7,  // 2: tensorflow.OpInfo.outputs:type_name -> tensorflow.OpInfo.TensorProperties
	9,  // 3: tensorflow.OpInfo.device:type_name -> tensorflow.DeviceProperties
	0,  // 4: tensorflow.OpInfo.session_info:type_name -> tensorflow.SessionInfo
	1,  // 5: tensorflow.OpPerformance.op:type_name -> tensorflow.OpInfo
	0,  // 6: tensorflow.OpPerformance.session_info:type_name -> tensorflow.SessionInfo
	2,  // 7: tensorflow.OpPerformance.execution_time_normal:type_name -> tensorflow.NormalDistribution
	3,  // 8: tensorflow.OpPerformance.execution_time_log_normal:type_name -> tensorflow.LogNormalDistribution
	8,  // 9: tensorflow.OpPerformance.op_memory:type_name -> tensorflow.OpPerformance.OpMemory
	4,  // 10: tensorflow.OpPerformanceList.op_performance:type_name -> tensorflow.OpPerformance
	10, // 11: tensorflow.OpInfo.AttrEntry.value:type_name -> tensorflow.AttrValue
	11, // 12: tensorflow.OpInfo.TensorProperties.dtype:type_name -> tensorflow.DataType
	12, // 13: tensorflow.OpInfo.TensorProperties.shape:type_name -> tensorflow.TensorShapeProto
	13, // 14: tensorflow.OpInfo.TensorProperties.value:type_name -> tensorflow.TensorProto
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_tensorflow_core_grappler_costs_op_performance_data_proto_init() }
func file_tensorflow_core_grappler_costs_op_performance_data_proto_init() {
	if File_tensorflow_core_grappler_costs_op_performance_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogNormalDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpPerformance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpPerformanceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpInfo_TensorProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpPerformance_OpMemory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*OpPerformance_ExecutionTimeNormal)(nil),
		(*OpPerformance_ExecutionTimeLogNormal)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_grappler_costs_op_performance_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_core_grappler_costs_op_performance_data_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_grappler_costs_op_performance_data_proto_depIdxs,
		MessageInfos:      file_tensorflow_core_grappler_costs_op_performance_data_proto_msgTypes,
	}.Build()
	File_tensorflow_core_grappler_costs_op_performance_data_proto = out.File
	file_tensorflow_core_grappler_costs_op_performance_data_proto_rawDesc = nil
	file_tensorflow_core_grappler_costs_op_performance_data_proto_goTypes = nil
	file_tensorflow_core_grappler_costs_op_performance_data_proto_depIdxs = nil
}
